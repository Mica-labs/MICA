# agents.yml
PatientRecord:
  type: llm agent
  description: Creates a brand-new patient record** by gathering name, contact info, and DOB.
  prompt: |
    1. Greet the user and confirm they want to create a new patient record.
    2. Ask for the patient's full name.
    3. Ask for contact information (phone or email).
    4. Ask for the patient's date of birth and instruct:
       “Please enter your date of birth in **MM/DD/YYYY** format (e.g. 08/24/1990).”
    5. When the user gives a date, output:
       {"data": {"date_of_birth": "<their date>"}, "bot": "Thanks!", "status": "running"}  
    6. Call `action_create_patient_record(name, contact_info, date_of_birth)`.
    7. Confirm record creation to the user.
  args:
    - name
    - contact_info
    - date_of_birth
  uses:
    - action_create_patient_record

AppointmentScheduler:
  type: llm agent
  description: Guides the user through scheduling a dental appointment.
  prompt: |
    1. Greet the user and confirm they want to schedule an appointment.
    2. Ask for the patient's name.
    3. Ask for the desired appointment **date only**, and instruct:
       “Please enter the date in **MM/DD/YYYY** format (e.g. 08/24/2025).”
    4. Call `action_check_availability(appointment_datetime)`.
    5. If available, call `action_schedule_appointment(name, appointment_datetime)` and confirm.
    6. If not available, apologize and ask for a different date (again reminding them of the MM/DD/YYYY format).
  args:
    - name
    - appointment_datetime
  uses:
    - action_check_availability
    - action_schedule_appointment

# ImageAnalysis:
#   type: llm agent
#   description: Handles X-ray or image analysis requests.
#   prompt: |
#     1. Confirm the user wants an image analyzed.
#     2. Ask for the image identifier or URL.
#     3. Call `action_analyze_image(image_id)`.
#     4. Present the analysis results to the user.
#   args:
#     - image_id
#   uses:
#     - action_analyze_image

# ImageAnalysis:
#   type: llm agent
#   description: Handles X-ray or image analysis requests.
#   prompt: |
#     1. Confirm the user wants an image analyzed.
#     2. Ask for the image identifier or URL.
#     3. Call `action_analyze_image(image_id)`.
#     4. When the function returns, emit this JSON (no extra text):
#        {"data": {"image_id": "<the id>", "analysis": "<the analysis>"}, "status": "complete"}
#     5. Present the analysis results to the user.
#   args:
#     - image_id
#   uses:
#     - action_analyze_image




NotificationSender:
  type: llm agent
  description: Sends appointment reminders or notifications.
  prompt: |
    1. Receive notification details (patient name, message).
    2. Call `action_send_notification(recipient, message)`.
    3. Confirm notification was sent.
  args:
    - recipient
    - message
  uses:
    - action_send_notification





PatientInformationInquiry:
  type: llm agent
  description: Looks up an existing** patient’s personal and appointment info. Requires patient_id or exact name.
  prompt: |
    1. Confirm the user wants to look up a patient’s information.
    2. Ask for the patient's full name or ID.
    3. Call `action_get_patient_info(name, patient_id)`.
    4. When the function returns, emit **only** this JSON (no extra text):
       {
       "data": {"patient_id": "<id>", "name": "<name>", "contact_info": "<contact>", "date_of_birth": "<dob>", "appointments": [{"appointment_id": "<id>", "datetime": "<dt>"}, ...]}, 
       "bot": "Here’s the information for <name>:\n• Patient ID: <id>\n• Contact: <contact>\n• DOB: <dob>\n• Appointments:\n•     Appointment: <id1> on <dt1>\n•    – ID: <id2> at <dt2>\n",
       "status": "complete"
       }
  args:
    - name
    - patient_id
    - contact_info
    - date_of_birth
    - appointments
  uses:
    - action_get_patient_info



meta:
  type: ensemble agent
  description: Routes user requests to the appropriate sub-agent.
  contains:
    - PatientRecord
    - AppointmentScheduler
    # - ImageAnalysis
    - NotificationSender
    - PatientInformationInquiry
  fallback: default
  exit: default
  steps:
    - bot: "Hello! I am your dental assistant. How can I help you today?"

main:
  type: flow agent
  steps:
    - call: meta